{"version":3,"sources":["components/Card/Card.module.css","container/CardContainer/CardContainer.module.css","components/Card/index.js","static/constants.js","functions.js","components/Button/index.js","container/CardContainer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","phaseList","phases","console","log","className","styles","card","map","phase","i","key","name","card_line_container","copyright","card_line","PHASES_CLASSIC","count","shuffleArray","array","length","j","Math","floor","random","Button","onClick","callback","text","CardContainer","copy","slice","initialPhase","shuffle","useState","setPhases","defaultPhase","Object","assign","classNames","card_container","animate","unanimate","setClassNames","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.12c26a11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1eE8R\",\"card--inner\":\"Card_card--inner__3_4nM\",\"card_line_container\":\"Card_card_line_container__oUKLE\",\"card_line\":\"Card_card_line__9L4yo\",\"copyright\":\"Card_copyright__2vohb\",\"line--red\":\"Card_line--red__3jhcj\",\"line--blue\":\"Card_line--blue__nrfKz\",\"line--green\":\"Card_line--green__2Vses\",\"line--yellow\":\"Card_line--yellow__20dks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card_container\":\"CardContainer_card_container__3dyeU\",\"animate\":\"CardContainer_animate__3Z5nV\",\"shuffleAnimate\":\"CardContainer_shuffleAnimate__2tn-1\",\"unanimate\":\"CardContainer_unanimate__8peUn\",\"shuffleunAnimate\":\"CardContainer_shuffleunAnimate__3gGU1\"};","import React from 'react';\nimport styles from './Card.module.css';\nconst Card = (props) => {\n\tconst { phases } = props;\n\tconst phaseList = phases.phases;\n\tconsole.log(phaseList);\n\treturn (\n\t\t<div className={styles.card}>\n\t\t\t<div className={styles['card--inner']}>\n\t\t\t\t<h1>Phase 1O</h1>\n\t\t\t\t<ol>\n\t\t\t\t\t{phaseList.map((phase, i) => {\n\t\t\t\t\t\treturn <li key={i}>{phase.name}</li>;\n\t\t\t\t\t})}\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t\t<div className={styles.card_line_container}>\n\t\t\t\t<span className={styles.copyright}>&copy;Mattel</span>\n\t\t\t\t<div className={`${styles.card_line} ${styles['line--red']}`}></div>\n\t\t\t\t<div className={`${styles.card_line} ${styles['line--blue']}`}></div>\n\t\t\t\t<div className={`${styles.card_line} ${styles['line--green']}`}></div>\n\t\t\t\t<div className={`${styles.card_line} ${styles['line--yellow']}`}></div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","export const PHASES_CLASSIC = [\n\t{ name: '2 sets of 3', count: 6 },\n\t{ name: '1 set of 3 + 1 run of 4', count: 7 },\n\t{ name: '1 set of 4 + 1 run of 4', count: 8 },\n\t{ name: '1 run of 7', count: 7 },\n\t{ name: '1 run of 8', count: 8 },\n\t{ name: '1 run of 9', count: 9 },\n\t{ name: '2 sets of 4', count: 8 },\n\t{ name: '7 cards of 1 color', count: 7 },\n\t{ name: '1 set of 5 + 1 set of 2', count: 7 },\n\t{ name: '1 set of 5 + 1 set of 3', count: 8 },\n];\n\nexport const PHASES_PARTIALS = [];","// export const shuffleArray = function (arr) {\n// \tlet arrLength = arr.length;\n// \tlet newArray = [];\n// };\n\n// function getRandomInt(max) {\n// \treturn Math.floor(Math.random() * Math.floor(max));\n// }\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport const shuffleArray = function (array) {\n\tfor (let i = array.length - 1; i > 0; i--) {\n\t\tconst j = Math.floor(Math.random() * (i + 1));\n\t\t[array[i], array[j]] = [array[j], array[i]];\n\t}\n\treturn array;\n};\n","import React from 'react';\n\nconst Button = (props) => {\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={props.callback}>{props.text}</button>\n\t\t</div>\n\t);\n};\n\nexport default Button;\n","import React, { useState } from 'react';\nimport Card from '../../components/Card';\nimport styles from './CardContainer.module.css';\nimport { PHASES_CLASSIC } from '../../static/constants';\nimport { shuffleArray } from '../../functions';\nimport Button from '../../components/Button';\n\nconst CardContainer = () => {\n\tconst copy = PHASES_CLASSIC.slice();\n\n\tconst initialPhase = { phases: copy, shuffle: false };\n\tconst [phases, setPhases] = useState(initialPhase);\n\n\tconst defaultPhase = Object.assign({}, { phases: copy, shuffle: false });\n\n\tlet setClassNames = () => {\n\t\tlet classNames = `${styles.card_container}`;\n\t\tclassNames = phases.shuffle\n\t\t\t? (classNames += ` ${styles.animate}`)\n\t\t\t: (classNames += ` ${styles.unanimate}`);\n\t\treturn classNames;\n\t};\n\n\treturn (\n\t\t<div className={setClassNames()}>\n\t\t\t<Card phases={phases} />\n\n\t\t\t<Button\n\t\t\t\ttext=\"Shuffle Phases\"\n\t\t\t\tcallback={() => {\n\t\t\t\t\tsetPhases({ phases: shuffleArray(phases.phases), shuffle: true });\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\ttext=\"Reset Phases\"\n\t\t\t\tcallback={() => {\n\t\t\t\t\tsetPhases({ ...defaultPhase });\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\n// class CardContainer extends Component {\n// \t// arrayPhases = PHASES_CLASSIC.slice();\n// \tconstructor() {\n// \t\tsuper();\n// \t\tthis.initialState = { phases: PHASES_CLASSIC.slice(), shuffle: false };\n// \t\tthis.state = this.initialState;\n// \t}\n\n// \tshufflePhases = () => {\n// \t\tthis.setState({\n// \t\t\tphases: shuffleArray(this.state.phases),\n// \t\t\tshuffle: !this.state.shuffle,\n// \t\t});\n// \t};\n\n// \tresetPhases = () => {\n// \t\tthis.setState({\n// \t\t\t...this.initialState,\n// \t\t\tphases: PHASES_CLASSIC.slice(),\n// \t\t});\n// \t};\n\n// \tsetClassNames = () => {\n// \t\tlet classNames = `${styles.card_container}`;\n// \t\tclassNames = this.state.shuffle\n// \t\t\t? (classNames += ` ${styles.animate}`)\n// \t\t\t: classNames;\n// \t\treturn classNames;\n// \t};\n\n// \trender() {\n// \t\tlet phaseList = this.state.phases;\n// \t\treturn (\n// \t\t\t<div className={this.setClassNames()}>\n// \t\t\t\t<Card phases={phaseList} />\n// \t\t\t\t<Button text=\"Shuffle Phases\" callback={this.shufflePhases} />\n// \t\t\t\t<Button text=\"Reset Phases\" callback={this.resetPhases} />\n// \t\t\t</div>\n// \t\t);\n// \t}\n// }\n\nexport default CardContainer;\n","import React from 'react';\nimport './App.css';\nimport CardContainer from './container/CardContainer';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<CardContainer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}